import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes
import asyncio
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN')
SENT_GROUP_ID = os.getenv('SENT_GROUP_ID')

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞")
    if not os.path.exists('hello.jpg'):
        logger.error("–§–∞–π–ª hello.jpg –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await update.message.reply_text("–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    with open('hello.jpg', 'rb') as photo:
        await update.message.reply_photo(
            photo=photo,
            caption="–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥! üëãüèº\n\n"
            "–ú–µ–Ω—è –∑–æ–≤—É—Ç –¢–æ—à–∞, —Ä–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è!)\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –æ–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±—è –≤–æ–ª–Ω—É–µ—Ç."
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{update.message.from_user.username}: {update.message.text}")
    user_message = update.message.text
    user = update.message.from_user

    group_message = (
        "üö® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username}\n"
        f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {user_message}"
    )

    try:
        await context.bot.send_message(
            chat_id=SENT_GROUP_ID,
            text=group_message
        )
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ, —è —É–∂–µ –∏—â—É üëÄ —Ä–µ—à–µ–Ω–∏–µ!\n\n"
        "–ê –ø–æ–∫–∞ –ø—Ä–µ–¥–ª–∞–≥–∞—é —Ç–µ–±–µ –ø—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–Ω–ª–∞–π–Ω-—Ç–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —É–∑–Ω–∞—Ç—å –µ—â—ë –Ω–µ–º–Ω–æ–≥–æ –æ —Ç–µ–±–µ ü´µüèº",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∏ —É–∑–Ω–∞—Ç—å —Å–≤–æ–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã!", url="https://docs.google.com/forms/d/e/1FAIpQLScZQidI6fqnU4uSWX9Hy41ghGf8hsS7PR2yxYK3_s957vA7Ew/viewform?usp=header")]
        ])
    )
    logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ—Å—Ç–æ–º")

    await asyncio.sleep(35)
    logger.info("–ü—Ä–æ—à–ª–æ 35 —Å–µ–∫—É–Ω–¥, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ü–µ–Ω–∫–æ–π")

    if not os.path.exists('like.jpg'):
        logger.error("–§–∞–π–ª like.jpg –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await update.message.reply_text("–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    with open('like.jpg', 'rb') as photo:
        await update.message.reply_photo(
            photo=photo,
            caption="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ!‚ö°Ô∏è\n\n"
            "–Ø –≤—ã—è–≤–∏–ª, —á—Ç–æ —Ç—ã ‚Äî –æ—Ç–ª–∏—á–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ –∏ —É —Ç–µ–±—è –µ—Å—Ç—å –±–æ–ª—å—à–æ–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è –ø–æ–∫–æ—Ä–µ–Ω–∏—è –ª—é–±—ã—Ö –≤–µ—Ä—à–∏–Ω‚õ∞Ô∏è\n\n"
            "–°–∫–æ—Ä–æ —Å —Ç–æ–±–æ–π —Å–≤—è–∂–µ—Ç—Å—è –æ–¥–∏–Ω –∏–∑ –Ω–∞—à–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤, —á—Ç–æ–±—ã –¥–∞—Ç—å —Ç–µ–±–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏ –º–æ—é —Ä–∞–±–æ—Ç—É, —á—Ç–æ–±—ã —Å –∫–∞–∂–¥—ã–º —Ä–∞–∑–æ–º —è —Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –ª—É—á—à–µ!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üëçüèª", callback_data="like")],
                [InlineKeyboardButton("üëéüèº", callback_data="dislike")]
            ])
        )
    logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ü–µ–Ω–∫–æ–π")

async def handle_rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    await query.edit_message_reply_markup(reply_markup=None)

    feedback_type = "–ª–∞–π–∫ üëçüèª" if query.data == "like" else "–¥–∏–∑–ª–∞–π–∫ üëéüèº"

    feedback_message = (
        "üì¢ –ß–µ–ª–æ–≤–µ–∫ @{} –¥–∞–ª —Ñ–∏–¥–±—ç–∫: {}"
    ).format(query.from_user.username, feedback_type)

    try:
        await context.bot.send_message(
            chat_id=SENT_GROUP_ID,
            text=feedback_message
        )
        logger.info("–§–∏–¥–±—ç–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–¥–±—ç–∫–∞ –≤ –≥—Ä—É–ø–ø—É: {e}")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    await query.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç‚ö°Ô∏è –î–æ —Å–∫–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á!")

def main():
    logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞... BOT_TOKEN: {BOT_TOKEN}, SENT_GROUP_ID: {SENT_GROUP_ID}")
    if not BOT_TOKEN or not SENT_GROUP_ID:
        logger.error("BOT_TOKEN –∏–ª–∏ SENT_GROUP_ID –Ω–µ –∑–∞–¥–∞–Ω—ã")
        return
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(handle_rating, pattern="^(like|dislike)$"))

    logger.info("ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == '__main__':
    main()
